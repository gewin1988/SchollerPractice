@page "/"

@using Data
@inject QuizService QuizRepository


<h1>Take your quiz!</h1>
<p>Your current score is @currentScore / @maxScore</p>

@if (quiz == null)
{
    <p><em>Loading...</em></p>
}
else
{
    int quizIndex = 0;
    @foreach (var quizItem in quiz)
    {
<section>
    <h3 class=@quizItem.ResultClass>@quizItem.Question</h3>
    @if (quizItem.QuestionQuestionType == QuestionOrAnswerType.Image)
    {
        <img style="height:200px;width:300px;" src="Images/@quizItem.QuestionImage" />
    }
    <div class="form-check">
        @{
            int choiceIndex = 0;
            quizScores.Add(0);
        }

        @foreach (var choice in quizItem.Choices)
        {
            int currentQuizIndex = quizIndex;
            if (quizItem.QuestionAnswerType == QuestionOrAnswerType.Image)
            {
                <img style="height:200px;width:300px;" src="Images/@choice" />
            }
            else
            {
                <label for="@quizIndex">@choice</label>
            }
            <input class="form-check-input" style="margin-left:0.5rem;" type="radio" name="@quizIndex" value="@choiceIndex" @onchange="@((eventArgs) => UpdateScore(eventArgs.Value.ToString(), currentQuizIndex))" />


            <br />
            choiceIndex++;
        }
    </div>
</section>

        quizIndex++;
    }

    <input class="btn btn-primary" type="submit" value="Submit" @onclick="QuizSubmitted">
}

@code {
    List<QuizItem> quiz;
    List<int> quizScores = new List<int>();
    int currentScore = 0;
    int maxScore = 0;

    string headerClass = "my-header-h3";

    protected override async Task OnInitializedAsync()
    {
        var list = await QuizRepository.GetQuizAsync();
        var rnd = new Random();
        quiz = (list.OrderBy(item => rnd.Next())).ToList();
        maxScore = quiz.Count;

    }

    void UpdateScore(string chosenAnswer, int quizIndex)
    {
        var quizItem = quiz[quizIndex];
        Console.WriteLine("ChosenAnswer = " + chosenAnswer + " - quizIndex = " + quizIndex);
        if (quizItem.Choices.ElementAt( Convert.ToInt32(chosenAnswer)) == quizItem.Answer)
        {
            quizScores[quizIndex] = quizItem.Score;
        }
        else
        {
            quizScores[quizIndex] = 0;
        }

    }

    void QuizSubmitted()
    {
        foreach(var quizItem in quiz)
        {
            if (quizScores[quiz.IndexOf(quizItem)] != 0)
            {
                quizItem.ResultClass = "passed";
            }
            else
                quizItem.ResultClass = "failed";
        }
        maxScore = quiz.Count;
        currentScore = quizScores.Sum();

        headerClass = "failed";
    }
}